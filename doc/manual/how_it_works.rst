.. _chapter-howitworks-label:

##################
How osm2city Works
##################

``osm2city`` is a set of procedural programs, which together create plausible FlightGear scenery objects (buildings, roads, power lines, piers, platforms etc.) based on OpenStreetMap_ (OSM) data as well as data already existing in the default FlightGear `World Scenery`_.

``Plausible`` means here that the generated scenery should look in a way that a person not knowing the details of a specific location could believe that reality actually looks like that. Or that a person knowing the location would find a fair representation of landmarks and dimensions to find her / his way around in the virtual world.

This plausible world is achieved tried to be achieved by using `heuristics`_ to interpret the data input and combine it with a set of :ref:`parameters <chapter-parameters-label>` as well as some randomness.

FlightGear and its World Scenery represent almost any location in our world. ``osm2city`` attempts to support this. Instead of a set of artists and programmers developing a specific scenery in a confined part of the world, which often means putting a considerable amount of hand-made objects into the scenery and tweaking stuff manually, ``osm2city`` uses generic heuristics, models, textures etc. and applies them to any part of the world with some parametrisation. This makes the task to cover the world a bit easier, but of course can only mimic the real world so much.

And then there are two twists to what is stated in the previous paragraph:

* The scenery generated by ``osm2city`` respects the static objects put into the default scenery by diverse FlightGear scenery developers around the world — especially airports and landmarks like bridges, worship buildings etc. (see also the `FlightGear Scenery Website`_ and the `Map over Scenery Models`_). I.e. the better the specific location is covered by manually created and placed static object, the closer to reality the combination with ``osm2city`` generated scenery objects it gets.
* ``osm2city`` generated scenery is only as good as the underlying data. The higher density and quality of the mapping done in OpenStreetMap, the better the scenery gets. In many parts of the world only a minor share of buildings is mapped at all. Often the only information available are floor plans and generic land-use zones — although the available `map features`_ in OSM are abundant and would allow for extreme sophistication (to be fair: this would then again require quite some sophistication in ``osm2city`` to consume). In some cities (especially Europe) mappers are using `Simple 3D Buildings`_, which results in nice representations in ``osm2city``, which can come close to hand-crafted models.

Remember: FlightGears default scenery is only using freely available (world-wide) data and related freely available scenery objects. And so is ``osm2city``. This data is often not as detailed as commercial products can provide.

Height above sea level is taken from the FlightGear scenery through some built in functionality in FlightGear (``fgelev``). The FlightGear scenery is also used to determine, where there is water (the land-use information in FlightGear does sometimes deviate considerably from OSM — up to tens of meters).

.. _OpenStreetMap: https://www.openstreetmap.org/
.. _World Scenery: http://wiki.flightgear.org/World_Scenery
.. _heuristics: https://en.wikipedia.org/wiki/Heuristic
.. _FlightGear Scenery Website: https://scenery.flightgear.org/
.. _Map over Scenery Models: https://scenery.flightgear.org/map/
.. _map features: https://wiki.openstreetmap.org/wiki/Map_Features
.. _Simple 3D Buildings: https://wiki.openstreetmap.org/wiki/Simple_3D_buildings

