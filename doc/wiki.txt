[[File:LOWI with OSM buildings.jpg|thumb|LOWI with OSM buildings]]

Take openstreetmap floorplans, create 3d buildings ready for use in FlightGear.

Development [https://gitorious.org/fg-radi/osm2city repository] on gitorous.
Written in python 2.7, developed on Linux

It's at a rather early stage of development, and currently not very user-friendly. You probably should know some python if you want to use it yourself. But it produces realistic city layouts (after all, it uses realistic data). The whole process -- from scratch to flying in FG -- for a city the size of LOWI takes perhaps one hour, including maybe a total of 15 mins manual work.

It has been tested with Dresden, Germany (EDDC) and Innsbruck, Austria (LOWI). Both areas are now populated with about 50,000 buildings. Rendering this in FG is quite demanding. The FG process eats ~2.8GB RAM when flying in those areas, the download is ~50 MB each.

== Status 05/2013 ==
Please see the development repository at: https://gitorious.org/fg-radi/osm2city

Currently data is processed offline beforehand. Basically, it parses the OSM
xml, generates a list of building outlines, discards some based on their area,
simplifies the outlines, clusters them into ~500x500m blocks and different LODs,
then writes .ac, .xml, and .stgs. OSM parsing is by far the most expensive,
easily taking 10 minutes for 50k buildings. Once that's done, the remaining
parts take maybe 1 minute in total. 

At the moment, the code knows only the floor plans. No streets, no runways, no
land-use. But it'll certainly process such data in the future, and then could
use some heuristics (some OSM buildings are labeled "Terminal 1" or so) to apply
terminal/hangar textures to buildings at airports. This way we could rather easily populate some airports with
'semi-generic' terminal/hangar buildings.

== Features ==
* reads buildings from OSM. Honors height and level tags.
* reads existing .stg, won't place OSM building if there's a static model nearby
* reads pre-calculated terrain elevation: places buildings at correct elevation
* LOD animation based on building height and area
* cluster a number of buildings into a single .ac files. Clusters overlap to alleviate sharp LOD borders
* basic sloped roof generation
* texture manager: DB of facade/roof textures
:* ~10 different, hi-res facade textures, some roof textures
:* find matching texture for given building (number of levels, modern/old building, etc)
:* find matching roof texture for given facade texture
* basic lightmap support
* position lights on tall buildings
* shows statistics on processed buildings
* writes .ac, .xml, .stg

== Planned Features ==
* make command line interface. Currently, everything is hard-coded.
* also parse OSM 'relation' tag and create 'buildings with holes'
* more complex roof shapes, put these into separate LOD
:* 2013/05: got permission from Olivier Teboul to use his python implementation of the straight skeleton algorithm
* more complex facade generation. Currently, all sides get same texture
* Rembrandt lighting
* put shared models if/where OSM indicates so: gas stations...
* use residential/industrial/commercial tags/areas. ATM, all is residential.
* geometry cleanup, simplify too complex buildings (what is "too complex"?)
:* 2013/05: started: now we use shapely's simplify method for that
* use more LOD levels, write them to different .ac so users can easily reduce building density, therefore improve performance
:* 2013/05: started: now roofs go into separate LOD
:* put large buildings into one ac, sort/rate buildings by stand-out-ness
:* then ship light/med/full .stg
* mid-term: develop this into a city-engine that procedurally generates a city based on OSM roads.
* long-term: integrate into FG to do all this on the fly.

== Ideas ==
* nearby hi-rise objects of similar shape get same texture? Probably too special a feature.
* bump map/reflection effects?
* a mode that generally uses shared models? If we find a shared models of matching floorplan, use this instead of creating a new, individual building? Will break clusters.
* a terrasync-like thing? Users get OSM buildings
(where available) on-the-fly? Might be quite costly in terms of runtime performance and bandwidth. The OSM download (buildings only!) is
~40MB for the 25x25km LOWI area.

== Install ==
* copy elev.nas to $FGDATA/Nasal/

== Workflow ==

* decide on a region you want to populate. Get its lon/lat coordinates.
* create project directory, say LOWI/
* get corresponding OSM data in OSM's native .xml format.
There are several options to get OSM data. From command line:
 wget www.overpass-api.de/api/xapi?*[building=*][bbox=11.16898,47.20837,11.79108,47.38161]
Put this data into LOWI/
* probe elevation for this area:
:* enter lon/lat for your area in the call to raster_glob() near tools.py:241 
:* run tools.py, this will create a file elev.in. Copy elev.in to $FGDATA/Nasal/
:* hide scenery/Objects/e.... folder, to prevent probing elevation on top of existing objects
:* run FG, open nasal console, enter: elev.get(), press execute. Might take a long time, depending on the area scanned. This will write elevation data to /tmp/elev.xml (which is actually just plain 5 column data: lon,lat,x,y,elevation). Put elev.xml into LOWI/

* set up osm2city.py (near top of file)
:* set prefix to LOWI/
:* set infile to your OSM .xml data. You can give a maximum number of objects to be parsed via total_objects = ..
<del>:* enter list of .stg paths which should be checked for existing objects in your area. Near osm2city.py:493</del>
(FIXED: we compute this on the fly now)

* run osm2city.py
:* the first run parses OSM data. This again takes quite looong (10 minutes or more for 50k buildings), but the result is written to file data.pkl. Next startup is much faster.
:* move buildings.pkl to LOWI/buildings.pkl
:* if all goes well, you should now have lots of files like LOWIcity0101.ac and their corresponding .xml files, along with .stg files
* adjust and run install.sh, this will install .ac, .xml, .stg files

== Improve fps ==
* adjust LOD range in FG
* use less buildings: increase min_area, LOD_percentage
(- use larger/smaller tiles? Tradeoff between distance calculations/xml parsing and GPU)

== Contributing ==
You know some python? Or you're keen on writing docs? Or just want to use osm2city, but got stuck somewhere? Contact radi on the FG forum.
None of the above? Take [[Howto:Create_textures_from_photos|pictures]] of buildings where you live! I'm especially interested in south-east asian style architecture, as I'm planning to populate Hong Kong Kai Tak (VHXX) in the future.

== Related ==
* [http://www.mail-archive.com/flightgear-devel@lists.sourceforge.net/msg40092.html Osm2city.py]
* [[Random Buildings]]
* http://flightgear.org/forums/viewtopic.php?f=5&t=19625
* [http://flightgear.org/forums/viewtopic.php?f=38&t=8837 PixelCity]
* [http://flightgear.org/forums/viewtopic.php?p=166794#p166681 Procedural OSM buildings]
